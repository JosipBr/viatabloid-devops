package com.viatabloid.backend.controller;

import com.viatabloid.backend.model.Story;
import com.viatabloid.backend.repository.StoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@RestController // Marks this class as a REST controller
@RequestMapping("/api/stories") // Base path for all endpoints in this controller
@CrossOrigin(origins = "http://localhost:5173") // Explicitly allow CORS from your React app
public class StoryController {

    @Autowired // Injects the StoryRepository dependency
    private StoryRepository storyRepository;

    // GET all stories
    @GetMapping
    public List<Story> getAllStories() {
        return storyRepository.findAll();
    }

    // GET story by ID
    @GetMapping("/{id}")
    public ResponseEntity<Story> getStoryById(@PathVariable UUID id) {
        Optional<Story> story = storyRepository.findById(id);
        return story.map(ResponseEntity::ok) // If story is present, return 200 OK with story
                     .orElseGet(() -> ResponseEntity.notFound().build()); // Else, return 404 Not Found
    }

    // POST a new story
    @PostMapping
    public ResponseEntity<Story> createStory(@RequestBody Story story) {
        // When creating a new story, we don't want the client to provide the ID.
        // The database (via @GeneratedValue) will handle it.
        // Ensure ID is null or let Spring handle it if it's auto-generated.
        story.setId(null); // Ensure ID is generated by DB for new creation
        Story savedStory = storyRepository.save(story);
        return new ResponseEntity<>(savedStory, HttpStatus.CREATED); // Return 201 Created
    }

    // PUT/UPDATE an existing story
    @PutMapping("/{id}")
    public ResponseEntity<Story> updateStory(@PathVariable UUID id, @RequestBody Story storyDetails) {
        Optional<Story> story = storyRepository.findById(id);

        if (story.isPresent()) {
            Story existingStory = story.get();
            existingStory.setTitle(storyDetails.getTitle());
            existingStory.setContent(storyDetails.getContent());
            existingStory.setDepartment(storyDetails.getDepartment());
            Story updatedStory = storyRepository.save(existingStory);
            return ResponseEntity.ok(updatedStory); // Return 200 OK with updated story
        } else {
            return ResponseEntity.notFound().build(); // Return 404 Not Found
        }
    }

    // DELETE a story
    @DeleteMapping("/{id}")
    public ResponseEntity<HttpStatus> deleteStory(@PathVariable UUID id) {
        try {
            storyRepository.deleteById(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT); // Return 204 No Content
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); // Return 500 Internal Server Error
        }
    }
}
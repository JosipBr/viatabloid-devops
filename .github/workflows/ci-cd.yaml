# .github/workflows/ci-cd.yaml
name: Fullstack CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # --- Frontend Jobs ---
  frontend-test:
    name: Frontend Unit Tests (React)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: viatabloid-frontend/package-lock.json # Specific cache path

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: viatabloid-frontend # Run in frontend directory

      - name: Run Frontend Tests and Generate Report
        run: npm test -- --reporter=junit --outputFile=junit.xml
        working-directory: viatabloid-frontend # Run in frontend directory

      - name: Upload Frontend Test Report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-report
          path: viatabloid-frontend/junit.xml # Path to report
          retention-days: 5

  frontend-build:
    name: Build Frontend App (React)
    runs-on: ubuntu-latest
    needs: frontend-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: viatabloid-frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: viatabloid-frontend

      - name: Build Frontend Application
        run: npm run build
        working-directory: viatabloid-frontend

      - name: Upload Frontend Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-build-output
          path: viatabloid-frontend/dist # Adjust if your build output is in 'build'
          retention-days: 5

  # --- Backend Jobs ---
  backend-test:
    name: Backend Unit Tests (Spring Boot)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven" # Cache Maven dependencies

      - name: Run Backend Tests
        run: mvn -B test
        working-directory: viatabloid-backend # Run in backend directory

      - name: Upload Backend Test Report
        uses: actions/upload-artifact@v4
        with:
          name: maven-test-report
          path: viatabloid-backend/target/surefire-reports # Adjust based on your Maven config
          retention-days: 5

  backend-build:
    name: Build Backend App (Spring Boot)
    runs-on: ubuntu-latest
    needs: backend-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven"

      - name: Build Backend Application with Maven
        run: mvn -B package -DskipTests
        working-directory: viatabloid-backend

      - name: Upload Backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: viatabloid-backend/target/*.jar
          retention-days: 5

  # --- Deployment Job ---
  deploy-to-minikube:
    name: Deploy to Minikube
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build] # Ensures both apps are built and tested

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: viatabloid-backend/target

      - name: Start Minikube
        id: minikube
        uses: medyagh/setup-minikube@latest

      - name: Verify Minikube Cluster
        run: kubectl get pods -A

      - name: Configure Docker and Build Images within Minikube's Daemon
        run: |
          export SHELL=/bin/bash
          eval $(minikube -p minikube docker-env)

          echo "--- Building Frontend Docker Image ---"
          docker build -f viatabloid-frontend/Dockerfile -t viatabloid-frontend:v1.0.0 ./viatabloid-frontend

          echo "--- Building Backend Docker Image ---"
          docker build -f viatabloid-backend/Dockerfile -t viatabloid-backend:v1.0.0 ./viatabloid-backend

          echo "--- Verifying Docker Images in Minikube's Daemon ---"
          docker images

      - name: Deploy to Minikube
        # Assuming k8s manifests are in a 'k8s' directory at the project root
        run: |
          kubectl apply -f k8s/frontend-deploy.yaml
          kubectl apply -f k8s/backend-deploy.yaml

      - name: Wait for Frontend Pod to be Ready
        id: wait_frontend_ready
        run: kubectl wait --for=condition=Ready pod -l app=viatabloid-frontend --timeout=300s
        continue-on-error: true

      - name: Debug Frontend Pod (if not ready)
        if: steps.wait_frontend_ready.outcome == 'failure' # This step runs ONLY if the wait timed out
        run: |
          echo "--- Debugging Frontend Pod ---"
          # Get the name of the failing pod
          POD_NAME=$(kubectl get pods -l app=viatabloid-frontend -o jsonpath='{.items[0].metadata.name}')
          echo "Pod Name: $POD_NAME"

          echo "--- Describing Pod ---"
          kubectl describe pod $POD_NAME

          echo "--- Pod Logs ---"
          kubectl logs $POD_NAME

          # Optional: If you suspect file issues, you can exec into the container
          # and list files. Note: the `ls` command must be available in the container.
          echo "--- Contents of Nginx HTML directory ---"
          kubectl exec $POD_NAME -- ls -la /usr/share/nginx/html
          echo "--- Contents of Nginx conf.d directory ---"
          kubectl exec $POD_NAME -- ls -la /etc/nginx/conf.d/
          echo "--- Contents of default.conf ---"
          kubectl exec $POD_NAME -- cat /etc/nginx/conf.d/default.conf

      - name: Wait for Backend Pod to be Ready
        run: kubectl wait --for=condition=Ready pod -l app=viatabloid-backend --timeout=300s

      - name: Get All Kubernetes Resources
        run: kubectl get all

      - name: Test Frontend Service URL
        run: |
          echo "Frontend Service URL: $(minikube service viatabloid-frontend-service --url)"
          # Example curl if you need to test the frontend HTTP endpoint
          # curl -v "$(minikube service viatabloid-frontend-service --url)"

      - name: Cleanup Minikube Environment
        if: always()
        run: |
          eval $(minikube docker-env -u)
          minikube delete
